import 'phaser';
import { MonoSynth } from 'tone';
import BassPad from './bassPad';
import { SavedSequence } from './drumMachine';
import MachineMusicMan from './mlmusician';
export default class BassPlayer extends Phaser.GameObjects.Container {
    bg: Phaser.GameObjects.Rectangle;
    synth: MonoSynth;
    notes: string[][];
    noteIndex: number;
    scales: string[];
    helpText: Phaser.GameObjects.Text;
    pads: BassPad[];
    resetButton: Phaser.GameObjects.Rectangle;
    volumeLine: Phaser.GameObjects.Rectangle;
    volumeSlide: Phaser.GameObjects.Ellipse;
    controlBG: Phaser.GameObjects.Rectangle;
    attack: Phaser.GameObjects.Rectangle;
    decay: Phaser.GameObjects.Rectangle;
    release: Phaser.GameObjects.Rectangle;
    sustain: Phaser.GameObjects.Rectangle;
    savedSeq: SavedSequence[];
    patternLoaded: boolean;
    aiButtonBG: Phaser.GameObjects.Rectangle;
    aiButton: Phaser.GameObjects.Rectangle;
    generatedPattern: any[];
    mlPatternGenerator: MachineMusicMan;
    scalesBtn: Phaser.GameObjects.Rectangle;
    showingScales: boolean;
    savedCards: {};
    savedText: {};
    muteButton: Phaser.GameObjects.Rectangle;
    muted: boolean;
    constructor(scene: Phaser.Scene, x: number, y: number, helpText?: Phaser.GameObjects.Text, logText?: Phaser.GameObjects.Text);
    getSeedLoop(): Promise<void>;
    setHelpText(helpText: Phaser.GameObjects.Text): void;
    makeSeqPads(): void;
    noteMidiToString(n: number, octive?: number): string;
    attachSynth(): void;
    getSynth(): MonoSynth;
    muteAll(): void;
    unmuteAll(): void;
    convertXtoVolume(x: number): number;
    addVolumeControls(): void;
    setNewScale(num: number): void;
    makeControlSurface(): void;
    clearAll(): void;
    saveSeq(): void;
    loadSeq(id?: string): void;
    loadSavedKeys(): string[];
    loadGeneratedLoop(savedSeq: any): void;
    update(): void;
}
