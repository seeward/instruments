import { AMSynth, Chorus, Delay, Distortion, Filter, FMSynth, MembraneSynth, PingPongDelay, PluckSynth, PolySynth } from 'tone';
import 'phaser';
import Metronome from './metronome';
import CustomRecorder from './recorder';
import 'webmidi';
import 'navigator';
import SynthManager from './synthManager';
import Drums from './sampler';
export default class KeyBoard extends Phaser.GameObjects.Container {
    _scales_: any[];
    synth: PluckSynth | PolySynth | FMSynth | AMSynth | MembraneSynth;
    synths: any[];
    currentSynthIndex: number;
    soundSwitcher: Phaser.GameObjects.Ellipse;
    recorder: CustomRecorder;
    effect: Delay | PingPongDelay | Distortion | Filter | Chorus;
    volumeLine: Phaser.GameObjects.Rectangle;
    volumeSlide: Phaser.GameObjects.Ellipse;
    effectStick: Phaser.GameObjects.Rectangle;
    effectBG: Phaser.GameObjects.Rectangle;
    effectBGInner: Phaser.GameObjects.Rectangle;
    dist: Distortion;
    delayControl: Phaser.GameObjects.Ellipse;
    effectStickInner: Phaser.GameObjects.Ellipse;
    distControl: Phaser.GameObjects.Ellipse;
    effectConnectFlag: boolean;
    distConnectFlag: boolean;
    metronome: Metronome;
    scaleIndex: number;
    tooltip: Phaser.GameObjects.Text;
    noteLength: any | number | string;
    eighth: Phaser.GameObjects.Rectangle;
    quarter: Phaser.GameObjects.Rectangle;
    half: Phaser.GameObjects.Rectangle;
    whole: Phaser.GameObjects.Rectangle;
    lengthSelector: Phaser.GameObjects.Ellipse;
    makeBubbles: boolean;
    bubbleControl: Phaser.GameObjects.Ellipse;
    synthManager: SynthManager;
    drums: Drums;
    helpText: Phaser.GameObjects.Text;
    constructor(scene: Phaser.Scene, x: number, y: number, recorder?: CustomRecorder, effect?: Delay | PingPongDelay | Distortion | Filter | Chorus, synth?: PolySynth | FMSynth | MembraneSynth | AMSynth, helpText?: Phaser.GameObjects.Text);
    initSynths(): Promise<void>;
    playSequence(seq: {
        notes: any[];
    }): void;
    addNoteLengthControls(): void;
    convertXtoVolume(x: number): number;
    getBetweenZeroAndOne(val: any, max: any, min: any): number;
    convertXToEffectParam1(x: number): number;
    convertYToEffectParam2(y: number): number;
    addMetronome(): void;
    addEffectControls(): void;
    getMIDIMessage(midiMessage: any): void;
    noteMidiToString(n: any): string;
    playMidiNote(t: any, noteObject: any): void;
    addVolumeControls(): void;
    addToneControls(): void;
    changeTone(newtone: PluckSynth | PolySynth | FMSynth | AMSynth | MembraneSynth): void;
    addBubbleControl(): void;
    makeBubble(x: number, y: number): void;
    createKeyboardControls(t: any): void;
    update(): void;
}
