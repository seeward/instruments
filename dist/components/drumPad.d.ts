import { Scene } from "phaser";
import { Loop, Player, Reverb } from "tone";
export default class DrumPad extends Phaser.GameObjects.Container {
    seqLength: number;
    sequence: boolean[];
    muted: boolean;
    pad: Phaser.GameObjects.Rectangle;
    seqCircles: Phaser.GameObjects.Ellipse[];
    sound: Player;
    mainSeq: Loop;
    allSelected: boolean;
    verb: Reverb;
    helpText: Phaser.GameObjects.Text;
    makeBubbles: boolean;
    bg: Phaser.GameObjects.Rectangle;
    onOff: Phaser.GameObjects.Rectangle;
    vol: Phaser.GameObjects.Ellipse;
    volBG: Phaser.GameObjects.Rectangle;
    volText: Phaser.GameObjects.Text;
    loopIndex: number;
    patternLoop: Loop<any>;
    constructor(scene: Phaser.Scene, x: number, y: number, sound: string, helpText?: Phaser.GameObjects.Text);
    loadSound(sound: string): Promise<Player>;
    onDestroy(): void;
    initSeqArray(): any[];
    makeBubble(x: number, y: number, s: Scene): void;
    adjustVerbDecay(decay: number): void;
    makePattern(index?: number, self?: Phaser.Scene): void;
    makeSequence(index: number, self: Phaser.Scene): void;
    setAllSeqStepsOnOrOff(): void;
    setReverb(lvl: number): void;
    makePadControl(): void;
    clear(): void;
    getSequence(): boolean[];
    setSequence(seq: boolean[]): void;
    isMuted(): boolean;
    setSeqOnOff(i: number, value?: boolean): void;
    makeSeqCircle(inx: number, xSpace: number, scene: Phaser.Scene): Phaser.GameObjects.Ellipse;
    hitSeqCircle(i: number, t: Phaser.Scene): void;
    hitSeqOffBeats(i: number, t: Phaser.Scene): void;
    makeSequenceControls(): void;
    update(): void;
}
